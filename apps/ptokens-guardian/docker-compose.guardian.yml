#
# NOTE: Generate the relative *.config.json using
# npx hardhat --network polygon apps:generate-configs --localhost
#
# NOTE: This dev docker-compose file use the mongo db instance
# on localhost, that's why you need to specify the --localhost
# flag above.
#
version: '3'
services:
  ipfs:
    image: ipfs/kubo:${VERSION_IPFS}
    restart: unless-stopped
    ports:
      - 4001:4001
    command:
      - daemon
      - --migrate=true
      - --enable-pubsub-experiment
      - --agent-version-suffix=docker
      - --init-profile=server # avoids port scanning

  state-emitter:
    image: ${IMAGE_STATE_EMITTER}:${VERSION_STATE_EMITTER}
    volumes:
      - ./state-emitter.config.json:${APP_CONFIG_JSON}
      - './private-key:${PRIVATE_KEY_FILE}'
    restart: unless-stopped
    depends_on: ['ipfs']

  goerli-listener:
    image: ${IMAGE_EVM_LISTENER}:${VERSION_LISTENER:-latest}
    volumes:
      - './goerli.listener.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    depends_on: ['mongodb']

  goerli-processor:
    image: ${IMAGE_EVM_PROCESSOR}:${VERSION_PROCESSOR:-latest}
    volumes:
      - './private-key:${PRIVATE_KEY_FILE}'
      - './goerli.processor.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    command: ./index.js pollForRequestsAndDismiss
    depends_on: ['mongodb']

  polygon-listener:
    image: ${IMAGE_EVM_LISTENER}:${VERSION_LISTENER:-latest}
    volumes:
      - './polygon.listener.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    depends_on: ['mongodb']

  polygon-processor:
    image: ${IMAGE_EVM_PROCESSOR}:${VERSION_PROCESSOR:-latest}
    volumes:
      - './private-key:${PRIVATE_KEY_FILE}'
      - './polygon.processor.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    command: ./index.js pollForRequestsAndDismiss
    depends_on: ['mongodb']

  bsc-listener:
    image: ${IMAGE_EVM_LISTENER}:${VERSION_LISTENER:-latest}
    volumes:
      - './bsc.listener.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    depends_on: ['mongodb']

  bsc-processor:
    image: ${IMAGE_EVM_PROCESSOR}:${VERSION_PROCESSOR:-latest}
    volumes:
      - './private-key:${PRIVATE_KEY_FILE}'
      - './bsc.processor.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    command: ./index.js pollForRequestsAndDismiss
    depends_on: ['mongodb']

  gnosis-listener:
    image: ${IMAGE_EVM_LISTENER}:${VERSION_LISTENER:-latest}
    volumes:
      - './gnosis.listener.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    depends_on: ['mongodb']

  gnosis-processor:
    image: ${IMAGE_EVM_PROCESSOR}:${VERSION_PROCESSOR:-latest}
    volumes:
      - './private-key:${PRIVATE_KEY_FILE}'
      - './gnosis.processor.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    command: ./index.js pollForRequestsAndDismiss
    depends_on: ['mongodb']

  mainnet-listener:
    image: ${IMAGE_EVM_LISTENER}:${VERSION_LISTENER:-latest}
    volumes:
      - './mainnet.listener.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    depends_on: ['mongodb']

  mainnet-processor:
    image: ${IMAGE_EVM_PROCESSOR}:${VERSION_PROCESSOR:-latest}
    volumes:
      - './private-key:${PRIVATE_KEY_FILE}'
      - './mainnet.processor.config.json:${APP_CONFIG_JSON}'
      - './logs:${APP_FOLDER_LOGS}'
    restart: unless-stopped
    command: ./index.js pollForRequestsAndDismiss
    depends_on: ['mongodb']
